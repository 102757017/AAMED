name: 为 Windows 编译 pyAAMED

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_windows:
    runs-on: windows-2022

    env:
      OPENCV_VERSION: "4.10.0"
      OPENCV_PYTHON_VERSION: "4.10.0.84" # 👈 确保此行存在且正确
      OPENCV_BUILD_VERSION: "4100"

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v4

    - name: 设置 Python ${{ matrix.python-version }} 环境
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 设置 MSVC C++ 编译环境
      uses: microsoft/setup-msbuild@v2

    - name: 安装依赖 (Cython, NumPy, 和 OpenCV-Python)
      shell: pwsh # 使用 pwsh 确保 PowerShell 7 环境
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8 # 确保 PowerShell 输出正确显示
        python -m pip install --upgrade pip
        # 🎯 修正：添加 Cython 的安装
        pip install Cython numpy "opencv-python==${{ env.OPENCV_PYTHON_VERSION }}"
      working-directory: ./python

    - name: 下载并准备 OpenCV C++ 库 (健壮版)
      shell: pwsh # 使用 pwsh 确保 PowerShell 7 环境
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8 # 确保 PowerShell 输出正确显示

        $opencv_version = "${{ env.OPENCV_VERSION }}"
        $opencv_zip = "opencv-$opencv_version-windows.exe"
        $opencv_install_dir = "D:/opencv-manually-built"
        $download_url = "https://github.com/opencv/opencv/releases/download/$opencv_version/$opencv_zip"

        Write-Host "正在从官方 GitHub Releases 下载 OpenCV $opencv_version..."
        curl -L -o $opencv_zip $download_url --retry 3 --retry-delay 5
        
        $file_size_mb = (Get-Item $opencv_zip).Length / 1MB
        Write-Host "下载完成，文件大小: $($file_size_mb.ToString('F2')) MB"
        # 🎯 修正：文件大小检查阈值调整到 100 MB，以适应实际文件大小 174.43 MB
        if ($file_size_mb -lt 100) { 
            Write-Error "错误：下载的 OpenCV 文件大小异常，可能不是完整安装包！"
            exit 1
        }

        New-Item -ItemType Directory -Path $opencv_install_dir -Force
        7z.exe x $opencv_zip -o"$opencv_install_dir" > $null
        if (-Not (Test-Path "$opencv_install_dir/opencv")) {
            Write-Error "错误：OpenCV 未能正确解压到 $opencv_install_dir/opencv"
            exit 1
        }

        Write-Host "OpenCV 已解压到: $opencv_install_dir/opencv"

        # 🎯 修正：重新添加将 MSYS2 `usr/bin` 目录添加到 PATH 的逻辑，解决 pkg-config 找不到的问题
        Write-Host "检查 pkg-config 是否可用..."
        $msys2_bin_path = "C:\msys64\usr\bin" # GitHub Actions windows-2022 上的常见 MSYS2 bin 路径
        if (Test-Path $msys2_bin_path) {
            # 临时将 MSYS2 bin 路径添加到当前步骤及后续步骤的 PATH
            Write-Host "::add-path::$msys2_bin_path"
            Write-Host "已将 $msys2_bin_path 添加到本次运行的 PATH。"
        } else {
            Write-Warning "MSYS2 安装路径 ($msys2_bin_path) 未找到。如果 setup.py 依赖 pkg-config，这可能导致失败。"
        }

        # 设置 OPENCV_ROOT 环境变量，供 setup.py 使用
        Write-Host "::set-env name=OPENCV_ROOT::$opencv_install_dir/opencv/build"

        Copy-Item -Path "python/setup.py" -Destination "python/setup_modified.py" -Force
        $setup_content = Get-Content "python/setup_modified.py"
        # 由于我们通过环境变量传递 OPENCV_ROOT 了，这个替换可能就不再需要了，或者可以简化 setup.py
        # 但为了兼容性，如果 setup.py 内部仍然有这个占位符，可以保留
        $new_setup_content = $setup_content -replace 'opencv_root\s*=\s*""', ('opencv_root = "' + $opencv_install_dir + '/opencv/build"')
        Set-Content -Path "python/setup_modified.py" -Value $new_setup_content
      working-directory: .

    - name: 编译 pyAAMED 扩展模块
      shell: pwsh # 使用 pwsh 确保 PowerShell 7 环境
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8 # 确保 PowerShell 输出正确显示
        python setup_modified.py build_ext --inplace
      working-directory: ./python
      
    - name: 验证编译输出并收集产物
      shell: pwsh # 使用 pwsh 确保 PowerShell 7 环境
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        Write-Host "正在查找编译产物..."
        $pyd_files = Get-ChildItem -Path python -Filter "pyAAMED*.pyd" -Recurse
        if ($null -eq $pyd_files) {
            Write-Error "错误：未在 'python/' 目录中找到编译生成的 .pyd 文件！"
            exit 1
        }
        Write-Host "已找到 PYD 文件: $($pyd_files.FullName)"
        
        $opencv_dll_path_base = "$opencv_install_dir/opencv/build/x64"
        $opencv_dll_source_path = ""

        # 检查 vc16 目录下的 DLL
        if (Test-Path "$opencv_dll_path_base/vc16/bin/opencv_world${{ env.OPENCV_BUILD_VERSION }}.dll") {
            $opencv_dll_source_path = "$opencv_dll_path_base/vc16/bin/opencv_world${{ env.OPENCV_BUILD_VERSION }}.dll"
            Write-Host "在 vc16 路径找到了 DLL：$opencv_dll_source_path"
        } 
        # 否则检查 vc17 目录下的 DLL
        elseif (Test-Path "$opencv_dll_path_base/vc17/bin/opencv_world${{ env.OPENCV_BUILD_VERSION }}.dll") {
            $opencv_dll_source_path = "$opencv_dll_path_base/vc17/bin/opencv_world${{ env.OPENCV_BUILD_VERSION }}.dll"
            Write-Host "在 vc17 路径找到了 DLL：$opencv_dll_source_path"
        } else {
            Write-Error "错误: 在预期的 OpenCV 解压路径中未找到需要的 DLL (vc16 或 vc17): $($opencv_dll_path_base)/vc16/bin 或 $($opencv_dll_path_base)/vc17/bin"
            exit 1
        }

        $opencv_dll_destination_path = "python/"
        Copy-Item -Path $opencv_dll_source_path -Destination $opencv_dll_destination_path -Force
        Write-Host "已将 OpenCV DLL 从 '$opencv_dll_source_path' 复制到 '$opencv_dll_destination_path'"
      working-directory: .

    - name: 上传编译产物 (pyAAMED.pyd 和 OpenCV DLL)
      uses: actions/upload-artifact@v4
      with:
        name: pyAAMED-py${{ matrix.python-version }}-windows
        path: |
          python/*.pyd
          python/opencv_world*.dll
        retention-days: 7
