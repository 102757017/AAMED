name: 为 Windows 编译 pyAAMED

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_windows:
    runs-on: windows-latest

    env:
      OPENCV_VERSION: "4.10.0"
      OPENCV_PYTHON_VERSION: "4.10.0.84"
      OPENCV_BUILD_VERSION: "4100"

    strategy:
      matrix:
        python-version: ["3.8.18", "3.11"] # 修正点1：为 Python 3.8 指定一个明确且稳定的补丁版本，避免 3.8.10 的安装问题。

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v4

    - name: 设置 Python ${{ matrix.python-version }} 环境
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 设置 MSVC C++ 编译环境
      # 修正点2：这是最关键的修正。此步骤会正确配置编译环境，确保 cl.exe 等工具可用。
      uses: microsoft/setup-msvc@v2
      with:
        # 使用默认的最新 Visual Studio 版本和 x64 架构，这对于我们的需求是完美的。
        # 此 Action 执行后，后续的 shell 步骤将处于一个类似 "Developer Command Prompt" 的环境中。
        architecture: 'x64'

    - name: 安装依赖 (NumPy 和 OpenCV-Python)
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install numpy "opencv-python==${{ env.OPENCV_PYTHON_VERSION }}"
      working-directory: ./python

    # 修正点3：移除我们自己的 C++ 工具检查步骤，因为它现在是多余的。
    # `microsoft/setup-msvc` action 会在找不到工具时自行失败，它的检查更可靠。
    # - name: 检查 C++ 编译工具 (编译所需) ...

    - name: 下载并准备用于手动编译的 OpenCV C++ 库
      shell: powershell
      run: |
        $opencv_version = "${{ env.OPENCV_VERSION }}"
        $opencv_zip = "opencv-$opencv_version-windows.exe"
        $opencv_install_dir = "D:/opencv-manually-built"

        Write-Host "正在下载 OpenCV $opencv_version..."
        Invoke-WebRequest -Uri "https://sourceforge.net/projects/opencvlibrary/files/$opencv_version/$opencv_zip/download" -OutFile $opencv_zip

        New-Item -ItemType Directory -Path $opencv_install_dir -Force
        7z.exe x $opencv_zip "-o$opencv_install_dir"

        Write-Host "OpenCV 已解压到: $opencv_install_dir/opencv"

        Copy-Item -Path "python/setup.py" -Destination "python/setup_modified.py"
        $setup_content = Get-Content "python/setup_modified.py"
        $new_setup_content = $setup_content -replace 'opencv_root\s*=\s*""','opencv_root = "' + $opencv_install_dir + '/opencv/build"'
        Set-Content -Path "python/setup_modified.py" -Value $new_setup_content
      working-directory: .

    - name: 编译 pyAAMED 扩展模块
      shell: powershell
      run: |
        python setup_modified.py build_ext --inplace
      working-directory: ./python

    - name: 验证编译输出并收集产物
      shell: powershell
      run: |
        Get-ChildItem -Path . -Filter "pyAAMED*.pyd" -Recurse
        Get-ChildItem -Path . -Filter "*.dll" -Recurse
        
        $dll_name = "opencv_world${{ env.OPENCV_BUILD_VERSION }}.dll"
        if (-Not (Test-Path "$PWD/$dll_name")) {
            Write-Error "编译完成后未找到 $dll_name 文件。可能出现问题。"
            exit 1
        }
        Write-Host "成功找到 $dll_name"
      working-directory: ./python

    - name: 上传编译产物 (pyAAMED.pyd 和 OpenCV DLL)
      uses: actions/upload-artifact@v4
      with:
        name: pyAAMED-${{ matrix.python-version }}-windows-pyd
        path: |
          python/*.pyd
          python/opencv_world*.dll
        retention-days: 7
