# Windows build workflow: 使用 vcpkg 安装 OpenCV，并优先使用 OPENCV_ROOT 环境变量，编译 pyAAMED
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_windows:
    runs-on: windows-2022

    env:
      OPENCV_VERSION: "4.10.0"
      OPENCV_PYTHON_VERSION: "4.10.0.84"
      OPENCV_BUILD_VERSION: "4100"

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v4

    - name: 设置 Python ${{ matrix.python-version }} 环境
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 设置 MSVC C++ 编译环境
      uses: microsoft/setup-msbuild@v2

    - name: 安装依赖 (NumPy 和 OpenCV-Python wheel)
      shell: powershell
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        python -m pip install --upgrade pip
        pip install numpy "opencv-python==${{ env.OPENCV_PYTHON_VERSION }}"
      working-directory: ./python

    - name: 安装 vcpkg 并通过 vcpkg 安装 OpenCV (更简洁、可重复)
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        $vcpkg_root = "$env:RUNNER_TEMP\vcpkg"
        if (-Not (Test-Path $vcpkg_root)) {
          git clone --depth 1 https://github.com/microsoft/vcpkg $vcpkg_root
        }
        & "$vcpkg_root\bootstrap-vcpkg.bat"
        # 安装 opencv（这个会花点时间），安装到 installed\x64-windows
        & "$vcpkg_root\vcpkg.exe" install opencv[contrib]:x64-windows
        $opencv_installed = "$vcpkg_root\installed\x64-windows"
        if (-Not (Test-Path $opencv_installed)) { throw "vcpkg 安装失败，未找到 $opencv_installed" }
        # 导出为环境变量供后面步骤使用
        Write-Output "OPENCV_VCPKG_ROOT=$opencv_installed" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      working-directory: .

    - name: 设置 OPENCV_ROOT 供 setup.py 使用 (来自 vcpkg)
      run: echo "OPENCV_ROOT=${{ env.OPENCV_VCPKG_ROOT }}" >> $GITHUB_ENV
      shell: bash

    - name: 使 setup.py 更可靠（可选：在仓库内对 setup.py 做少量替换）
      # 这里我们假设已经在 repo 中保存了 python/setup.py，可以直接复制为 setup_modified.py（示例可选）
      run: |
        cp python/setup.py python/setup_modified.py
      shell: bash
      working-directory: .

    - name: 编译 pyAAMED 扩展模块
      shell: powershell
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        python python/setup_modified.py build_ext --inplace
      working-directory: .

    - name: 验证编译输出并收集产物
      shell: powershell
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        Write-Host "正在查找编译产物..."
        $pyd_files = Get-ChildItem -Path python -Filter "pyAAMED*.pyd" -Recurse
        if ($null -eq $pyd_files) {
            Write-Error "错误：未在 'python/' 目录中找到编译生成的 .pyd 文件！"
            exit 1
        }
        Write-Host "已找到 PYD 文件: $($pyd_files.FullName)"
        $vcpkg_bin = "${{ env.OPENCV_VCPKG_ROOT }}\bin"
        if (Test-Path $vcpkg_bin) {
            Get-ChildItem $vcpkg_bin -Filter "opencv_world*.dll" -Recurse | ForEach-Object {
                Copy-Item $_.FullName -Destination "python/" -Force
                Write-Host "复制 DLL: $($_.FullName)"
            }
        } else {
            Write-Warning "未找到 vcpkg bin 目录: $vcpkg_bin"
        }
      working-directory: .

    - name: 上传编译产物 (pyAAMED.pyd 和 OpenCV DLL)
      uses: actions/upload-artifact@v4
      with:
        name: pyAAMED-py${{ matrix.python-version }}-windows
        path: |
          python/*.pyd
          python/opencv_world*.dll
        retention-days: 7