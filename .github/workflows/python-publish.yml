name: 为 Windows 编译 pyAAMED

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_windows:
    runs-on: windows-2022

    env:
      OPENCV_VERSION: "4.10.0"
      OPENCV_PYTHON_VERSION: "4.10.0.84"
      OPENCV_BUILD_VERSION: "4100" # 用于 setup.py 获取版本，例如 "4100" 代表 4.10.0

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v4

    - name: 设置 Python ${{ matrix.python-version }} 环境
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 设置 MSVC C++ 编译环境
      uses: microsoft/setup-msbuild@v2

    - name: 安装依赖 (Cython, NumPy, 和 OpenCV-Python)
      shell: pwsh
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        python -m pip install --upgrade pip
        pip install Cython numpy "opencv-python==${{ env.OPENCV_PYTHON_VERSION }}"
      working-directory: ./python

    - name: 下载并准备 OpenCV C++ 库
      shell: pwsh
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8

        $opencv_version = "${{ env.OPENCV_VERSION }}"
        $opencv_zip = "opencv-$opencv_version-windows.exe"
        $opencv_install_dir = "D:/opencv-manually-built"
        $download_url = "https://github.com/opencv/opencv/releases/download/$opencv_version/$opencv_zip"

        Write-Host "正在从官方 GitHub Releases 下载 OpenCV $opencv_version..."
        curl -L -o $opencv_zip $download_url --retry 3 --retry-delay 5
        
        $file_size_mb = (Get-Item $opencv_zip).Length / 1MB
        Write-Host "下载完成，文件大小: $($file_size_mb.ToString('F2')) MB"
        if ($file_size_mb -lt 100) { 
            Write-Error "错误：下载的 OpenCV 文件大小异常，可能不是完整安装包！"
            exit 1
        }

        New-Item -ItemType Directory -Path $opencv_install_dir -Force
        7z.exe x $opencv_zip -o"$opencv_install_dir" > $null
        if (-Not (Test-Path "$opencv_install_dir/opencv")) {
            Write-Error "错误：OpenCV 未能正确解压到 $opencv_install_dir/opencv"
            exit 1
        }

        Write-Host "OpenCV 已解压到: $opencv_install_dir/opencv"

        # 确保 MSYS2 的 bin 目录在 PATH 中 (如果仍需要 pkg-config)
        Write-Host "检查并添加 MSYS2 bin 目录到 PATH..."
        $msys2_bin_path = "C:\msys64\usr\bin"
        if (Test-Path $msys2_bin_path) {
            Add-Content -Path $env:GITHUB_PATH -Value $msys2_bin_path
            Write-Host "已将 $msys2_bin_path 添加到本次运行的 PATH (通过 GITHUB_PATH)。"
        } else {
            Write-Warning "MSYS2 安装路径 ($msys2_bin_path) 未找到。如果 setup.py 依赖 pkg-config，这可能导致失败。"
        }

        # ✨ 关键修正：OPENCV_ROOT 应该指向 opencv 文件夹的根目录，而不是 build 文件夹
        # 例如 D:/opencv-manually-built/opencv
        Add-Content -Path $env:GITHUB_ENV -Value "OPENCV_ROOT=$($opencv_install_dir)/opencv"
        Write-Host "已设置环境变量 OPENCV_ROOT=$($opencv_install_dir)/opencv (通过 GITHUB_ENV)。"

      working-directory: .

    - name: 编译 pyAAMED 扩展模块
      shell: pwsh
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        # 使用 setup_modified.py 进行编译
        python setup_modified.py build_ext --inplace
      working-directory: ./python
      
    - name: 验证编译输出并收集产物
      shell: pwsh
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        Write-Host "正在查找编译产物..."
        $pyd_files = Get-ChildItem -Path python -Filter "pyAAMED*.pyd" -Recurse
        if ($null -eq $pyd_files) {
            Write-Error "错误：未在 'python/' 目录中找到编译生成的 .pyd 文件！"
            exit 1
        }
        Write-Host "已找到 PYD 文件: $($pyd_files.FullName)"
        
        # 这个路径是正确的，因为它基于 $opencv_install_dir/opencv/build
        $opencv_dll_path_base = "$opencv_install_dir/opencv/build/x64"
        $opencv_dll_source_path = ""

        if (Test-Path "$opencv_dll_path_base/vc16/bin/opencv_world${{ env.OPENCV_BUILD_VERSION }}.dll") {
            $opencv_dll_source_path = "$opencv_dll_path_base/vc16/bin/opencv_world${{ env.OPENCV_BUILD_VERSION }}.dll"
            Write-Host "在 vc16 路径找到了 DLL：$opencv_dll_source_path"
        } 
        elseif (Test-Path "$opencv_dll_path_base/vc17/bin/opencv_world${{ env.OPENCV_BUILD_VERSION }}.dll") {
            $opencv_dll_source_path = "$opencv_dll_path_base/vc17/bin/opencv_world${{ env.OPENCV_BUILD_VERSION }}.dll"
            Write-Host "在 vc17 路径找到了 DLL：$opencv_dll_source_path"
        } else {
            Write-Error "错误: 在预期的 OpenCV 解压路径中未找到需要的 DLL (vc16 或 vc17): $($opencv_dll_path_base)/vc16/bin 或 $($opencv_dll_path_base)/vc17/bin"
            exit 1
        }

        $opencv_dll_destination_path = "python/"
        Copy-Item -Path $opencv_dll_source_path -Destination $opencv_dll_destination_path -Force
        Write-Host "已将 OpenCV DLL 从 '$opencv_dll_source_path' 复制到 '$opencv_dll_destination_path'"
      working-directory: .

    - name: 上传编译产物 (pyAAMED.pyd 和 OpenCV DLL)
      uses: actions/upload-artifact@v4
      with:
        name: pyAAMED-py${{ matrix.python-version }}-windows
        path: |
          python/*.pyd
          python/opencv_world*.dll
        retention-days: 7
